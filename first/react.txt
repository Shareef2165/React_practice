import React, { useState } from 'react';

const FormValidation = () => {
  const [form, setForm] = useState({
    name: '',
    email: '',
    password: '',
    dob: '',
    mobile: '',
    gender: '',
    role: '',
    zipCode: ''
  });

  const [errors, setErrors] = useState({});

  const validate = () => {
    let errors = {};
    
    // Name validation (only letters allowed)
    if (!form.name.trim()) {
      errors.name = 'Name is required';
    } else if (!/^[A-Za-z ]+$/.test(form.name)) {
      errors.name = 'Name should only contain letters';
    }

    // Email validation
    if (!form.email.trim()) {
      errors.email = 'Email is required';
    } else if (!/\S+@\S+\.\S+/.test(form.email)) {
      errors.email = 'Email is invalid';
    }

    // Password validation (6-12 characters, 1 number, 1 special char)
    if (!form.password) {
      errors.password = 'Password is required';
    } else if (!/^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{6,12}$/.test(form.password)) {
      errors.password = 'Password must be 6-12 characters, with at least one number and one special character';
    }

    // DOB validation (Format: YYYY-MM-DD)
    if (!form.dob) {
      errors.dob = 'Date of Birth is required';
    } else if (!/^\d{4}-\d{2}-\d{2}$/.test(form.dob)) {
      errors.dob = 'Date of Birth must be in the format YYYY-MM-DD';
    }

    // Mobile number validation (10 digits)
    if (!form.mobile) {
      errors.mobile = 'Mobile number is required';
    } else if (!/^\d{10}$/.test(form.mobile)) {
      errors.mobile = 'Mobile number must be 10 digits';
    }

    // Gender validation (must be Male or Female)
    if (!form.gender) {
      errors.gender = 'Gender is required';
    } else if (!['Male', 'Female'].includes(form.gender)) {
      errors.gender = 'Gender must be Male or Female';
    }

    // Role validation (must not be empty)
    if (!form.role) {
      errors.role = 'Role is required';
    }

    // Zip code validation (5-6 digits)
    if (!form.zipCode) {
      errors.zipCode = 'Zip/Postal code is required';
    } else if (!/^\d{5,6}$/.test(form.zipCode)) {
      errors.zipCode = 'Zip/Postal code must be 5 or 6 digits';
    }

    setErrors(errors);
    return Object.keys(errors).length === 0; // Return true if no errors
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    try {
      if (validate()) {
        alert('Form submitted successfully!');
      } else {
        alert('Form has errors');
      }
    } catch (error) {
      console.error('Form submission failed', error);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm({ ...form, [name]: value });
  };

  return (
    <div>
      <h1>React Form Validation</h1>
      <form onSubmit={handleSubmit}>
        <div>
          <label>Name:</label>
          <input type="text" name="name" value={form.name} onChange={handleChange} />
          {errors.name && <p>{errors.name}</p>}
        </div>
        
        <div>
          <label>Email:</label>
          <input type="email" name="email" value={form.email} onChange={handleChange} />
          {errors.email && <p>{errors.email}</p>}
        </div>

        <div>
          <label>Password:</label>
          <input type="password" name="password" value={form.password} onChange={handleChange} />
          {errors.password && <p>{errors.password}</p>}
        </div>

        <div>
          <label>Date of Birth (YYYY-MM-DD):</label>
          <input type="date" name="dob" value={form.dob} onChange={handleChange} />
          {errors.dob && <p>{errors.dob}</p>}
        </div>

        <div>
          <label>Mobile:</label>
          <input type="text" name="mobile" value={form.mobile} onChange={handleChange} />
          {errors.mobile && <p>{errors.mobile}</p>}
        </div>

        <div>
          <label>Gender:</label>
          <select name="gender" value={form.gender} onChange={handleChange}>
            <option value="">Select</option>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
          </select>
          {errors.gender && <p>{errors.gender}</p>}
        </div>

        <div>
          <label>Role:</label>
          <input type="text" name="role" value={form.role} onChange={handleChange} />
          {errors.role && <p>{errors.role}</p>}
        </div>

        <div>
          <label>Zip Code:</label>
          <input type="text" name="zipCode" value={form.zipCode} onChange={handleChange} />
          {errors.zipCode && <p>{errors.zipCode}</p>}
        </div>

        <button type="submit">Submit</button>
      </form>
    </div>
  );
};

export default FormValidation;
